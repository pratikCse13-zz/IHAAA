{"version":3,"sources":["../../../server/exchanges/bittrex/bittrex.js"],"names":["request","require","Promise","reload","fs","Exchange","Feed","Bittrex","marketsApi","marketSummariesApi","currenciesApi","makerTxnFee","takerTxnFee","console","log","options","uri","getMarketsApi","json","get","markets","result","writeFileSync","__dirname","JSON","stringify","module","exports"],"mappings":";;;;;;;;;;;;AAAA;;;AAGA,IAAIA,UAAUC,QAAQ,iBAAR,CAAd;AACA,IAAIC,UAAUD,QAAQ,UAAR,CAAd;AACA,IAAIE,SAASF,QAAQ,gBAAR,EAA0BA,OAA1B,CAAb;AACA,IAAIG,KAAKH,QAAQ,IAAR,CAAT;;AAEA;;;AAGA,IAAII,WAAWJ,QAAQ,aAAR,CAAf;AACA,IAAIK,OAAOL,QAAQ,YAAR,CAAX;;IAEMM,O;;;AACL,oBAAa;AAAA;;AAAA;;AAAA,QAKbC,UALa,GAKA,gDALA;AAAA,QAMbC,kBANa,GAMQ,wDANR;AAAA,QAObC,aAPa,GAOG,mDAPH;AAAA,QAQbC,WARa,GAQC,MARD;AAAA,QASbC,WATa,GASC,MATD;AAAA;AAEZ;;AAED;;;;;+BAOY;AACX,UAAOT,OAAO,cAAP,CAAP;AACA;;;kCAEc;AACd,UAAO,KAAKK,UAAZ;AACA;;;0CAEsB;AACtB,UAAO,KAAKC,kBAAZ;AACA;;;qCAEiB;AACjB,UAAO,KAAKC,aAAZ;AACA;;;;;;;;;;AAGAG,gBAAQC,GAAR,CAAY,6BAAZ;AACIC,e,GAAU;AACbC,cAAK,KAAKC,aAAL,EADQ;AAEbC,eAAM,IAFO,CAEF;AAFE,S;;;eAKOlB,QAAQmB,GAAR,CAAYJ,OAAZ,C;;;AAAhBK,e;;;;;;;;AAEJP,gBAAQC,GAAR,CAAY,kDAAZ;AACAD,gBAAQC,GAAR;;;AAEDM,kBAAUA,QAAQC,MAAlB;AACAjB,WAAGkB,aAAH,CAAiBC,YAAU,eAA3B,EAA4CC,KAAKC,SAAL,CAAeL,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAA5C;AACAP,gBAAQC,GAAR,CAAY,4BAAZ;;;;;;;;;;;;;;;;;;;EA1CoBT,Q;;AAmDtBqB,OAAOC,OAAP,GAAiBpB,OAAjB","file":"bittrex.js","sourcesContent":["/**\n * import npm modules\n */\nvar request = require('request-promise')\nvar Promise = require('bluebird')\nvar reload = require('require-reload')(require)\nvar fs = require('fs')\n\n/**\n * import package modules\n */\nvar Exchange = require('../exchange')\nvar Feed = require('../../feed')\n\nclass Bittrex extends Exchange{\n\tconstructor(){\n\t\tsuper();\n\t};\n\n\t//private variables\n\tmarketsApi = 'https://bittrex.com/api/v1.1/public/getmarkets';\n\tmarketSummariesApi = 'https://bittrex.com/api/v1.1/public/getmarketsummaries';\n\tcurrenciesApi = 'https://bittrex.com/api/v1.1/public/getcurrencies';\n\tmakerTxnFee = 0.0025;\n\ttakerTxnFee = 0.0025;\n\n\tgetMarkets(){\n\t\treturn reload('markets.json');\n\t}\n\n\tgetMarketsApi(){\n\t\treturn this.marketsApi;\n\t}\n\n\tgetMarketSummariesApi(){\n\t\treturn this.marketSummariesApi;\n\t}\n\n\tgetCurrenciesApi(){\n\t\treturn this.currenciesApi;\n\t}\n\n\tasync refreshMarkets(){\n\t\tconsole.log('Refreshing Bittrex markets.')\n\t\tvar options = {\n\t\t\turi: this.getMarketsApi(),\n\t\t\tjson: true // Automatically parses the JSON string in the response\n\t\t};\n\t\ttry {\n\t\t\tvar markets = await request.get(options);\n\t\t} catch(err) {\n\t\t\tconsole.log('Error in fetching markets for Exchange: Bittrex.');\n\t\t\tconsole.log(err);\n\t\t}\n\t\tmarkets = markets.result;\n\t\tfs.writeFileSync(__dirname+'/markets.json', JSON.stringify(markets, null, 4));\n\t\tconsole.log('Bittrex markets refreshed.')\t\t\n\t};\n\n\t// refreshData = async () => {\n\t// \tvar [markets, marketSummary, currencies] = await Promise.all([request(this.getMarketsApi), request(this.getMarketSummariesApi), request(this.getCurrenciesApi)]);\n\t// \tvar newFeed = new Feed('bittrex', markets.marketCurrency, markets.baseCurrency);\t\n\t// };\n}\n\nmodule.exports = Bittrex;"]}